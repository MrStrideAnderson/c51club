C51 COMPILER V9.00   LDBLIB                                                                11/27/2017 19:45:01 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LDBLIB
OBJECT MODULE PLACED IN .\obj\ldblib.obj
COMPILER INVOKED BY: C:\my program\Keil\C51\BIN\C51.EXE src\ldblib.c OMF2 BROWSE DEBUG PRINT(.\ldblib.lst) OBJECT(.\obj\
                    -ldblib.obj)

line level    source

   1          /*
   2          ** $Id: ldblib.c,v 1.104.1.4 2009/08/04 18:50:18 roberto Exp $
   3          ** Interface from Lua to its debug API
   4          ** See Copyright Notice in lua.h
   5          */
   6          
   7          
   8          #include <stdio.h>
   9          #include <stdlib.h>
  10          #include <string.h>
  11          
  12          #define ldblib_c
  13          #define LUA_LIB
  14          
  15          #include "lua.h"
  16          
  17          #include "lauxlib.h"
*** ERROR C202 IN LINE 138 OF SRC\LAUXLIB.H: 'BUFSIZ': undefined identifier
*** ERROR C136 IN LINE 138 OF SRC\LAUXLIB.H: invalid dimension size: [0]
  18          #include "lualib.h"
  19          #include "lrotable.h"
  20          
  21          
  22          
  23          static int db_getregistry (lua_State *L) {
  24   1        lua_pushvalue(L, LUA_REGISTRYINDEX);
  25   1        return 1;
  26   1      }
  27          
  28          
  29          static int db_getmetatable (lua_State *L) {
  30   1        luaL_checkany(L, 1);
  31   1        if (!lua_getmetatable(L, 1)) {
  32   2          lua_pushnil(L);  /* no metatable */
  33   2        }
  34   1        return 1;
  35   1      }
  36          
  37          
  38          static int db_setmetatable (lua_State *L) {
  39   1        int t = lua_type(L, 2);
  40   1        luaL_argcheck(L, t == LUA_TNIL || t == LUA_TTABLE, 2,
  41   1                          "nil or table expected");
  42   1        lua_settop(L, 2);
  43   1        lua_pushboolean(L, lua_setmetatable(L, 1));
  44   1        return 1;
  45   1      }
  46          
  47          
  48          static int db_getfenv (lua_State *L) {
  49   1        luaL_checkany(L, 1);
  50   1        lua_getfenv(L, 1);
  51   1        return 1;
  52   1      }
C51 COMPILER V9.00   LDBLIB                                                                11/27/2017 19:45:01 PAGE 2   

  53          
  54          
  55          static int db_setfenv (lua_State *L) {
  56   1        luaL_checktype(L, 2, LUA_TTABLE);
  57   1        lua_settop(L, 2);
  58   1        if (lua_setfenv(L, 1) == 0)
  59   1          luaL_error(L, LUA_QL("setfenv")
  60   1                        " cannot change environment of given object");
  61   1        return 1;
  62   1      }
  63          
  64          
  65          static void settabss (lua_State *L, const char *i, const char *v) {
  66   1        lua_pushstring(L, v);
  67   1        lua_setfield(L, -2, i);
  68   1      }
  69          
  70          
  71          static void settabsi (lua_State *L, const char *i, int v) {
  72   1        lua_pushinteger(L, v);
  73   1        lua_setfield(L, -2, i);
  74   1      }
  75          
  76          
  77          static lua_State *getthread (lua_State *L, int *arg) {
  78   1        if (lua_isthread(L, 1)) {
  79   2          *arg = 1;
  80   2          return lua_tothread(L, 1);
  81   2        }
  82   1        else {
  83   2          *arg = 0;
  84   2          return L;
  85   2        }
  86   1      }
  87          
  88          
  89          static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {
  90   1        if (L == L1) {
  91   2          lua_pushvalue(L, -2);
  92   2          lua_remove(L, -3);
  93   2        }
  94   1        else
  95   1          lua_xmove(L1, L, 1);
  96   1        lua_setfield(L, -2, fname);
  97   1      }
  98          
  99          
 100          static int db_getinfo (lua_State *L) {
 101   1        lua_Debug ar;
 102   1        int arg;
 103   1        lua_State *L1 = getthread(L, &arg);
 104   1        const char *options = luaL_optstring(L, arg+2, "flnSu");
 105   1        if (lua_isnumber(L, arg+1)) {
 106   2          if (!lua_getstack(L1, (int)lua_tointeger(L, arg+1), &ar)) {
 107   3            lua_pushnil(L);  /* level out of range */
 108   3            return 1;
 109   3          }
 110   2        }
 111   1        else if (lua_isfunction(L, arg+1) || lua_islightfunction(L, arg+1)) {
 112   2          lua_pushfstring(L, ">%s", options);
 113   2          options = lua_tostring(L, -1);
 114   2          lua_pushvalue(L, arg+1);
C51 COMPILER V9.00   LDBLIB                                                                11/27/2017 19:45:01 PAGE 3   

 115   2          lua_xmove(L, L1, 1);
 116   2        }
 117   1        else
 118   1          return luaL_argerror(L, arg+1, "function or level expected");
 119   1        if (!lua_getinfo(L1, options, &ar))
 120   1          return luaL_argerror(L, arg+2, "invalid option");
 121   1        lua_createtable(L, 0, 2);
 122   1        if (strchr(options, 'S')) {
 123   2          settabss(L, "source", ar.source);
 124   2          settabss(L, "short_src", ar.short_src);
 125   2          settabsi(L, "linedefined", ar.linedefined);
 126   2          settabsi(L, "lastlinedefined", ar.lastlinedefined);
 127   2          settabss(L, "what", ar.what);
 128   2        }
 129   1        if (strchr(options, 'l'))
 130   1          settabsi(L, "currentline", ar.currentline);
 131   1        if (strchr(options, 'u'))
 132   1          settabsi(L, "nups", ar.nups);
 133   1        if (strchr(options, 'n')) {
 134   2          settabss(L, "name", ar.name);
 135   2          settabss(L, "namewhat", ar.namewhat);
 136   2        }
 137   1        if (strchr(options, 'L'))
 138   1          treatstackoption(L, L1, "activelines");
 139   1        if (strchr(options, 'f'))
 140   1          treatstackoption(L, L1, "func");
 141   1        return 1;  /* return table */
 142   1      }
 143              
 144          
 145          static int db_getlocal (lua_State *L) {
 146   1        int arg;
 147   1        lua_State *L1 = getthread(L, &arg);
 148   1        lua_Debug ar;
 149   1        const char *name;
 150   1        if (!lua_getstack(L1, luaL_checkint(L, arg+1), &ar))  /* out of range? */
 151   1          return luaL_argerror(L, arg+1, "level out of range");
 152   1        name = lua_getlocal(L1, &ar, luaL_checkint(L, arg+2));
 153   1        if (name) {
 154   2          lua_xmove(L1, L, 1);
 155   2          lua_pushstring(L, name);
 156   2          lua_pushvalue(L, -2);
 157   2          return 2;
 158   2        }
 159   1        else {
 160   2          lua_pushnil(L);
 161   2          return 1;
 162   2        }
 163   1      }
 164          
 165          
 166          static int db_setlocal (lua_State *L) {
 167   1        int arg;
 168   1        lua_State *L1 = getthread(L, &arg);
 169   1        lua_Debug ar;
 170   1        if (!lua_getstack(L1, luaL_checkint(L, arg+1), &ar))  /* out of range? */
 171   1          return luaL_argerror(L, arg+1, "level out of range");
 172   1        luaL_checkany(L, arg+3);
 173   1        lua_settop(L, arg+3);
 174   1        lua_xmove(L, L1, 1);
 175   1        lua_pushstring(L, lua_setlocal(L1, &ar, luaL_checkint(L, arg+2)));
 176   1        return 1;
C51 COMPILER V9.00   LDBLIB                                                                11/27/2017 19:45:01 PAGE 4   

 177   1      }
 178          
 179          
 180          static int auxupvalue (lua_State *L, int get) {
 181   1        const char *name;
 182   1        int n = luaL_checkint(L, 2);
 183   1        luaL_checktype(L, 1, LUA_TFUNCTION);
 184   1        if (lua_iscfunction(L, 1)) return 0;  /* cannot touch C upvalues from Lua */
 185   1        name = get ? lua_getupvalue(L, 1, n) : lua_setupvalue(L, 1, n);
 186   1        if (name == NULL) return 0;
 187   1        lua_pushstring(L, name);
 188   1        lua_insert(L, -(get+1));
 189   1        return get + 1;
 190   1      }
 191          
 192          
 193          static int db_getupvalue (lua_State *L) {
 194   1        return auxupvalue(L, 1);
 195   1      }
 196          
 197          
 198          static int db_setupvalue (lua_State *L) {
 199   1        luaL_checkany(L, 3);
 200   1        return auxupvalue(L, 0);
 201   1      }
 202          
 203          
 204          
 205          static const char KEY_HOOK = 'h';
 206          
 207          
 208          static void hookf (lua_State *L, lua_Debug *ar) {
 209   1        static const char *const hooknames[] =
 210   1          {"call", "return", "line", "count", "tail return"};
 211   1        lua_pushlightuserdata(L, (void *)&KEY_HOOK);
 212   1        lua_rawget(L, LUA_REGISTRYINDEX);
 213   1        lua_pushlightuserdata(L, L);
 214   1        lua_rawget(L, -2);
 215   1        if (lua_isfunction(L, -1)) {
 216   2          lua_pushstring(L, hooknames[(int)ar->event]);
 217   2          if (ar->currentline >= 0)
 218   2            lua_pushinteger(L, ar->currentline);
 219   2          else lua_pushnil(L);
 220   2          lua_assert(lua_getinfo(L, "lS", ar));
 221   2          lua_call(L, 2, 0);
 222   2        }
 223   1      }
 224          
 225          
 226          static int makemask (const char *smask, int count) {
 227   1        int mask = 0;
 228   1        if (strchr(smask, 'c')) mask |= LUA_MASKCALL;
 229   1        if (strchr(smask, 'r')) mask |= LUA_MASKRET;
 230   1        if (strchr(smask, 'l')) mask |= LUA_MASKLINE;
 231   1        if (count > 0) mask |= LUA_MASKCOUNT;
 232   1        return mask;
 233   1      }
 234          
 235          
 236          static char *unmakemask (int mask, char *smask) {
 237   1        int i = 0;
 238   1        if (mask & LUA_MASKCALL) smask[i++] = 'c';
C51 COMPILER V9.00   LDBLIB                                                                11/27/2017 19:45:01 PAGE 5   

 239   1        if (mask & LUA_MASKRET) smask[i++] = 'r';
 240   1        if (mask & LUA_MASKLINE) smask[i++] = 'l';
 241   1        smask[i] = '\0';
 242   1        return smask;
 243   1      }
 244          
 245          
 246          static void gethooktable (lua_State *L) {
 247   1        lua_pushlightuserdata(L, (void *)&KEY_HOOK);
 248   1        lua_rawget(L, LUA_REGISTRYINDEX);
 249   1        if (!lua_istable(L, -1)) {
 250   2          lua_pop(L, 1);
 251   2          lua_createtable(L, 0, 1);
 252   2          lua_pushlightuserdata(L, (void *)&KEY_HOOK);
 253   2          lua_pushvalue(L, -2);
 254   2          lua_rawset(L, LUA_REGISTRYINDEX);
 255   2        }
 256   1      }
 257          
 258          
 259          static int db_sethook (lua_State *L) {
 260   1        int arg, mask, count;
 261   1        lua_Hook func;
 262   1        lua_State *L1 = getthread(L, &arg);
 263   1        if (lua_isnoneornil(L, arg+1)) {
 264   2          lua_settop(L, arg+1);
 265   2          func = NULL; mask = 0; count = 0;  /* turn off hooks */
 266   2        }
 267   1        else {
 268   2          const char *smask = luaL_checkstring(L, arg+2);
 269   2          luaL_checkanyfunction(L, arg+1);
 270   2          count = luaL_optint(L, arg+3, 0);
 271   2          func = hookf; mask = makemask(smask, count);
 272   2        }
 273   1        gethooktable(L);
 274   1        lua_pushlightuserdata(L, L1);
 275   1        lua_pushvalue(L, arg+1);
 276   1        lua_rawset(L, -3);  /* set new hook */
 277   1        lua_pop(L, 1);  /* remove hook table */
 278   1        lua_sethook(L1, func, mask, count);  /* set hooks */
 279   1        return 0;
 280   1      }
 281          
 282          
 283          static int db_gethook (lua_State *L) {
 284   1        int arg;
 285   1        lua_State *L1 = getthread(L, &arg);
 286   1        char buff[5];
 287   1        int mask = lua_gethookmask(L1);
 288   1        lua_Hook hook = lua_gethook(L1);
 289   1        if (hook != NULL && hook != hookf)  /* external hook? */
 290   1          lua_pushliteral(L, "external hook");
 291   1        else {
 292   2          gethooktable(L);
 293   2          lua_pushlightuserdata(L, L1);
 294   2          lua_rawget(L, -2);   /* get hook */
 295   2          lua_remove(L, -2);  /* remove hook table */
 296   2        }
 297   1        lua_pushstring(L, unmakemask(mask, buff));
 298   1        lua_pushinteger(L, lua_gethookcount(L1));
 299   1        return 3;
 300   1      }
C51 COMPILER V9.00   LDBLIB                                                                11/27/2017 19:45:01 PAGE 6   

 301          
 302          
 303          static int db_debug (lua_State *L) {
 304   1        for (;;) {
 305   2          char buffer[250];
 306   2          fputs("lua_debug> ", stderr);
 307   2          if (fgets(buffer, sizeof(buffer), stdin) == 0 ||
 308   2              strcmp(buffer, "cont\n") == 0)
 309   2            return 0;
 310   2          if (luaL_loadbuffer(L, buffer, strlen(buffer), "=(debug command)") ||
 311   2              lua_pcall(L, 0, 0, 0)) {
 312   3            fputs(lua_tostring(L, -1), stderr);
 313   3            fputs("\n", stderr);
 314   3          }
 315   2          lua_settop(L, 0);  /* remove eventual returns */
 316   2        }
 317   1      }
 318          
 319          
 320          #define LEVELS1 12      /* size of the first part of the stack */
 321          #define LEVELS2 10      /* size of the second part of the stack */
 322          
 323          static int db_errorfb (lua_State *L) {
 324   1        int level;
 325   1        int firstpart = 1;  /* still before eventual `...' */
 326   1        int arg;
 327   1        lua_State *L1 = getthread(L, &arg);
 328   1        lua_Debug ar;
 329   1        if (lua_isnumber(L, arg+2)) {
 330   2          level = (int)lua_tointeger(L, arg+2);
 331   2          lua_pop(L, 1);
 332   2        }
 333   1        else
 334   1          level = (L == L1) ? 1 : 0;  /* level 0 may be this own function */
 335   1        if (lua_gettop(L) == arg)
 336   1          lua_pushliteral(L, "");
 337   1        else if (!lua_isstring(L, arg+1)) return 1;  /* message is not a string */
 338   1        else lua_pushliteral(L, "\n");
 339   1        lua_pushliteral(L, "stack traceback:");
 340   1        while (lua_getstack(L1, level++, &ar)) {
 341   2          if (level > LEVELS1 && firstpart) {
 342   3            /* no more than `LEVELS2' more levels? */
 343   3            if (!lua_getstack(L1, level+LEVELS2, &ar))
 344   3              level--;  /* keep going */
 345   3            else {
 346   4              lua_pushliteral(L, "\n\t...");  /* too many levels */
 347   4              while (lua_getstack(L1, level+LEVELS2, &ar))  /* find last levels */
 348   4                level++;
 349   4            }
 350   3            firstpart = 0;
 351   3            continue;
 352   3          }
 353   2          lua_pushliteral(L, "\n\t");
 354   2          lua_getinfo(L1, "Snl", &ar);
 355   2          lua_pushfstring(L, "%s:", ar.short_src);
 356   2          if (ar.currentline > 0)
 357   2            lua_pushfstring(L, "%d:", ar.currentline);
 358   2          if (*ar.namewhat != '\0')  /* is there a name? */
 359   2              lua_pushfstring(L, " in function " LUA_QS, ar.name);
 360   2          else {
 361   3            if (*ar.what == 'm')  /* main? */
 362   3              lua_pushfstring(L, " in main chunk");
C51 COMPILER V9.00   LDBLIB                                                                11/27/2017 19:45:01 PAGE 7   

 363   3            else if (*ar.what == 'C' || *ar.what == 't')
 364   3              lua_pushliteral(L, " ?");  /* C function or tail call */
 365   3            else
 366   3              lua_pushfstring(L, " in function <%s:%d>",
 367   3                                 ar.short_src, ar.linedefined);
 368   3          }
 369   2          lua_concat(L, lua_gettop(L) - arg);
 370   2        }
 371   1        lua_concat(L, lua_gettop(L) - arg);
 372   1        return 1;
 373   1      }
 374          
 375          #define MIN_OPT_LEVEL 1
 376          #include "lrodefs.h"
 377          const LUA_REG_TYPE dblib[] = {
 378            {LSTRKEY("debug"), LFUNCVAL(db_debug)},
 379            {LSTRKEY("getfenv"), LFUNCVAL(db_getfenv)},
 380            {LSTRKEY("gethook"), LFUNCVAL(db_gethook)},
 381            {LSTRKEY("getinfo"), LFUNCVAL(db_getinfo)},
 382            {LSTRKEY("getlocal"), LFUNCVAL(db_getlocal)},
 383            {LSTRKEY("getregistry"), LFUNCVAL(db_getregistry)},
 384            {LSTRKEY("getmetatable"), LFUNCVAL(db_getmetatable)},
 385            {LSTRKEY("getupvalue"), LFUNCVAL(db_getupvalue)},
 386            {LSTRKEY("setfenv"), LFUNCVAL(db_setfenv)},
 387            {LSTRKEY("sethook"), LFUNCVAL(db_sethook)},
 388            {LSTRKEY("setlocal"), LFUNCVAL(db_setlocal)},
 389            {LSTRKEY("setmetatable"), LFUNCVAL(db_setmetatable)},
 390            {LSTRKEY("setupvalue"), LFUNCVAL(db_setupvalue)},
 391            {LSTRKEY("traceback"), LFUNCVAL(db_errorfb)},
 392            {LNILKEY, LNILVAL}
 393          };
 394          
 395          LUALIB_API int luaopen_debug (lua_State *L) {
 396   1        LREGISTER(L, LUA_DBLIBNAME, dblib);
 397   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  2 ERROR(S)
