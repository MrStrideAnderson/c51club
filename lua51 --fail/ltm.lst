C51 COMPILER V9.00   LTM                                                                   11/27/2017 19:45:04 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LTM
OBJECT MODULE PLACED IN .\obj\ltm.obj
COMPILER INVOKED BY: C:\my program\Keil\C51\BIN\C51.EXE src\ltm.c OMF2 BROWSE DEBUG PRINT(.\ltm.lst) OBJECT(.\obj\ltm.ob
                    -j)

line level    source

   1          /*
   2          ** $Id: ltm.c,v 2.8.1.1 2007/12/27 13:02:25 roberto Exp $
   3          ** Tag methods
   4          ** See Copyright Notice in lua.h
   5          */
   6          
   7          
   8          #include <string.h>
   9          
  10          #define ltm_c
  11          #define LUA_CORE
  12          
  13          #include "lua.h"
  14          
  15          #include "lobject.h"
  16          #include "lstate.h"
  17          #include "lstring.h"
  18          #include "ltable.h"
  19          #include "ltm.h"
  20          #include "lrotable.h"
  21          
  22          
  23          
  24          const char *const luaT_typenames[] = {
  25            "nil", "boolean", "romtable", "lightfunction", "userdata", "number",
  26            "string", "table", "function", "userdata", "thread",
  27            "proto", "upval"
  28          };
  29          
  30          
  31          void luaT_init (lua_State *L) {
  32   1        static const char *const luaT_eventname[] = {  /* ORDER TM */
  33   1          "__index", "__newindex",
  34   1          "__gc", "__mode", "__eq",
  35   1          "__add", "__sub", "__mul", "__div", "__mod",
  36   1          "__pow", "__unm", "__len", "__lt", "__le",
  37   1          "__concat", "__call"
  38   1        };
  39   1        int i;
  40   1        for (i=0; i<TM_N; i++) {
  41   2          G(L)->tmname[i] = luaS_new(L, luaT_eventname[i]);
  42   2          luaS_fix(G(L)->tmname[i]);  /* never collect these names */
  43   2        }
  44   1      }
  45          
  46          
  47          /*
  48          ** function to be used with macro "fasttm": optimized for absence of
  49          ** tag methods
  50          */
  51          const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {
  52   1        const TValue *tm = luaR_isrotable(events) ? luaH_getstr_ro(events, ename) : luaH_getstr(events, ename); 
  53   1        lua_assert(event <= TM_EQ);
*** WARNING C275 IN LINE 53 OF SRC\LTM.C: expression with possibly no effect
C51 COMPILER V9.00   LTM                                                                   11/27/2017 19:45:04 PAGE 2   

  54   1        if (ttisnil(tm)) {  /* no tag method? */
  55   2          if (!luaR_isrotable(events))
  56   2            events->flags |= cast_byte(1u<<event);  /* cache this fact */
  57   2          return NULL;
  58   2        }
  59   1        else return tm;
  60   1      }
  61          
  62          
  63          const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {
  64   1        Table *mt;
  65   1        switch (ttype(o)) {
  66   2          case LUA_TTABLE:
  67   2            mt = hvalue(o)->metatable;
  68   2            break;
  69   2          case LUA_TROTABLE:
  70   2            mt = (Table*)luaR_getmeta(rvalue(o));
  71   2            break;
  72   2          case LUA_TUSERDATA:
  73   2            mt = uvalue(o)->metatable;
  74   2            break;
  75   2          default:
  76   2            mt = G(L)->mt[ttype(o)];
  77   2        }
  78   1        if (!mt)
  79   1          return luaO_nilobject;
  80   1        else if (luaR_isrotable(mt))
  81   1          return luaH_getstr_ro(mt, G(L)->tmname[event]);
  82   1        else
  83   1          return luaH_getstr(mt, G(L)->tmname[event]);
  84   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    469    ----
   CONSTANT SIZE    =    202    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     90      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
