C51 COMPILER V9.00   LFUNC                                                                 11/27/2017 19:45:01 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LFUNC
OBJECT MODULE PLACED IN .\obj\lfunc.obj
COMPILER INVOKED BY: C:\my program\Keil\C51\BIN\C51.EXE src\lfunc.c OMF2 BROWSE DEBUG PRINT(.\lfunc.lst) OBJECT(.\obj\lf
                    -unc.obj)

line level    source

   1          /*
   2          ** $Id: lfunc.c,v 2.12.1.2 2007/12/28 14:58:43 roberto Exp $
   3          ** Auxiliary functions to manipulate prototypes and closures
   4          ** See Copyright Notice in lua.h
   5          */
   6          
   7          
   8          #include <stddef.h>
   9          
  10          #define lfunc_c
  11          #define LUA_CORE
  12          
  13          #include "lua.h"
  14          
  15          #include "lfunc.h"
  16          #include "lgc.h"
  17          #include "lmem.h"
  18          #include "lobject.h"
  19          #include "lstate.h"
  20          
  21          
  22          
  23          Closure *luaF_newCclosure (lua_State *L, int nelems, Table *e) {
  24   1        Closure *c = cast(Closure *, luaM_malloc(L, sizeCclosure(nelems)));
  25   1        luaC_link(L, obj2gco(c), LUA_TFUNCTION);
  26   1        c->c.isC = 1;
  27   1        c->c.env = e;
  28   1        c->c.nupvalues = cast_byte(nelems);
  29   1        return c;
  30   1      }
  31          
  32          
  33          Closure *luaF_newLclosure (lua_State *L, int nelems, Table *e) {
  34   1        Closure *c = cast(Closure *, luaM_malloc(L, sizeLclosure(nelems)));
  35   1        luaC_link(L, obj2gco(c), LUA_TFUNCTION);
  36   1        c->l.isC = 0;
  37   1        c->l.env = e;
  38   1        c->l.nupvalues = cast_byte(nelems);
  39   1        while (nelems--) c->l.upvals[nelems] = NULL;
  40   1        return c;
  41   1      }
  42          
  43          
  44          UpVal *luaF_newupval (lua_State *L) {
  45   1        UpVal *uv = luaM_new(L, UpVal);
  46   1        luaC_link(L, obj2gco(uv), LUA_TUPVAL);
  47   1        uv->v = &uv->u.value;
  48   1        setnilvalue(uv->v);
  49   1        return uv;
  50   1      }
  51          
  52          
  53          UpVal *luaF_findupval (lua_State *L, StkId level) {
  54   1        global_State *g = G(L);
C51 COMPILER V9.00   LFUNC                                                                 11/27/2017 19:45:01 PAGE 2   

  55   1        GCObject **pp = &L->openupval;
  56   1        UpVal *p;
  57   1        UpVal *uv;
  58   1        while (*pp != NULL && (p = ngcotouv(*pp))->v >= level) {
  59   2          lua_assert(p->v != &p->u.value);
*** WARNING C275 IN LINE 59 OF SRC\LFUNC.C: expression with possibly no effect
  60   2          if (p->v == level) {  /* found a corresponding upvalue? */
  61   3            if (isdead(g, obj2gco(p)))  /* is it dead? */
  62   3              changewhite(obj2gco(p));  /* ressurect it */
  63   3            return p;
  64   3          }
  65   2          pp = &p->next;
  66   2        }
  67   1        uv = luaM_new(L, UpVal);  /* not found: create a new one */
  68   1        uv->tt = LUA_TUPVAL;
  69   1        uv->v = level;  /* current value lives in the stack */
  70   1        uv->next = *pp;  /* chain it in the proper position */
  71   1        *pp = obj2gco(uv);
  72   1        uv->u.l.prev = &g->uvhead;  /* double link it in `uvhead' list */
  73   1        uv->u.l.next = g->uvhead.u.l.next;
  74   1        uv->u.l.next->u.l.prev = uv;
  75   1        g->uvhead.u.l.next = uv;
  76   1        luaC_marknew(L, obj2gco(uv));
  77   1        lua_assert(uv->u.l.next->u.l.prev == uv && uv->u.l.prev->u.l.next == uv);
*** WARNING C275 IN LINE 77 OF SRC\LFUNC.C: expression with possibly no effect
  78   1        return uv;
  79   1      }
  80          
  81          
  82          static void unlinkupval (UpVal *uv) {
  83   1        lua_assert(uv->u.l.next->u.l.prev == uv && uv->u.l.prev->u.l.next == uv);
*** WARNING C275 IN LINE 83 OF SRC\LFUNC.C: expression with possibly no effect
  84   1        uv->u.l.next->u.l.prev = uv->u.l.prev;  /* remove from `uvhead' list */
  85   1        uv->u.l.prev->u.l.next = uv->u.l.next;
  86   1      }
  87          
  88          
  89          void luaF_freeupval (lua_State *L, UpVal *uv) {
  90   1        if (uv->v != &uv->u.value)  /* is it open? */
  91   1          unlinkupval(uv);  /* remove from open list */
  92   1        luaM_free(L, uv);  /* free upvalue */
  93   1      }
  94          
  95          
  96          void luaF_close (lua_State *L, StkId level) {
  97   1        UpVal *uv;
  98   1        global_State *g = G(L);
  99   1        while (L->openupval != NULL && (uv = ngcotouv(L->openupval))->v >= level) {
 100   2          GCObject *o = obj2gco(uv);
 101   2          lua_assert(!isblack(o) && uv->v != &uv->u.value);
*** WARNING C275 IN LINE 101 OF SRC\LFUNC.C: expression with possibly no effect
 102   2          L->openupval = uv->next;  /* remove from `open' list */
 103   2          if (isdead(g, o))
 104   2            luaF_freeupval(L, uv);  /* free upvalue */
 105   2          else {
 106   3            unlinkupval(uv);
 107   3            setobj(L, &uv->u.value, uv->v);
*** WARNING C275 IN LINE 107 OF SRC\LFUNC.C: expression with possibly no effect
 108   3            uv->v = &uv->u.value;  /* now current value lives here */
 109   3            luaC_linkupval(L, uv);  /* link upvalue into `gcroot' list */
 110   3          }
 111   2        }
C51 COMPILER V9.00   LFUNC                                                                 11/27/2017 19:45:01 PAGE 3   

 112   1      }
 113          
 114          
 115          Proto *luaF_newproto (lua_State *L) {
 116   1        Proto *f = luaM_new(L, Proto);
 117   1        luaC_link(L, obj2gco(f), LUA_TPROTO);
 118   1        f->k = NULL;
 119   1        f->sizek = 0;
 120   1        f->p = NULL;
 121   1        f->sizep = 0;
 122   1        f->code = NULL;
*** ERROR C141 IN LINE 122 OF SRC\LFUNC.C: syntax error near 'code', expected '<id>'
 123   1        f->sizecode = 0;
 124   1        f->sizelineinfo = 0;
 125   1        f->sizeupvalues = 0;
 126   1        f->nups = 0;
 127   1        f->upvalues = NULL;
 128   1        f->numparams = 0;
 129   1        f->is_vararg = 0;
 130   1        f->maxstacksize = 0;
 131   1        f->lineinfo = NULL;
 132   1        f->sizelocvars = 0;
 133   1        f->locvars = NULL;
 134   1        f->linedefined = 0;
 135   1        f->lastlinedefined = 0;
 136   1        f->source = NULL;
 137   1        return f;
 138   1      }
 139          
 140          
 141          void luaF_freeproto (lua_State *L, Proto *f) {
 142   1        luaM_freearray(L, f->p, f->sizep, Proto *);
 143   1        luaM_freearray(L, f->k, f->sizek, TValue);
 144   1        luaM_freearray(L, f->locvars, f->sizelocvars, struct LocVar);
 145   1        luaM_freearray(L, f->upvalues, f->sizeupvalues, TString *);
 146   1        if (!proto_is_readonly(f)) {
 147   2          luaM_freearray(L, f->code, f->sizecode, Instruction);
*** ERROR C141 IN LINE 147 OF SRC\LFUNC.C: syntax error near 'code', expected '<id>'
 148   2          luaM_freearray(L, f->lineinfo, f->sizelineinfo, int);
 149   2        }
 150   1        luaM_free(L, f);
 151   1      }
 152          
 153          
 154          void luaF_freeclosure (lua_State *L, Closure *c) {
 155   1        int size = (c->c.isC) ? sizeCclosure(c->c.nupvalues) :
 156   1                                sizeLclosure(c->l.nupvalues);
 157   1        luaM_freemem(L, c, size);
 158   1      }
 159          
 160          
 161          /*
 162          ** Look for n-th local variable at line `line' in function `func'.
 163          ** Returns NULL if not found.
 164          */
 165          const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {
 166   1        int i;
 167   1        for (i = 0; i<f->sizelocvars && f->locvars[i].startpc <= pc; i++) {
 168   2          if (pc < f->locvars[i].endpc) {  /* is variable active? */
 169   3            local_number--;
 170   3            if (local_number == 0)
 171   3              return getstr(f->locvars[i].varname);
C51 COMPILER V9.00   LFUNC                                                                 11/27/2017 19:45:01 PAGE 4   

 172   3          }
 173   2        }
 174   1        return NULL;  /* not found */
 175   1      }
 176          

C51 COMPILATION COMPLETE.  5 WARNING(S),  2 ERROR(S)
