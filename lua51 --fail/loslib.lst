C51 COMPILER V9.00   LOSLIB                                                                11/27/2017 19:45:03 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LOSLIB
OBJECT MODULE PLACED IN .\obj\loslib.obj
COMPILER INVOKED BY: C:\my program\Keil\C51\BIN\C51.EXE src\loslib.c OMF2 BROWSE DEBUG PRINT(.\loslib.lst) OBJECT(.\obj\
                    -loslib.obj)

line level    source

   1          /*
   2          ** $Id: loslib.c,v 1.19.1.3 2008/01/18 16:38:18 roberto Exp $
   3          ** Standard Operating System library
   4          ** See Copyright Notice in lua.h
   5          */
   6          
   7          
   8          #include <errno.h>
   9          #include <locale.h>
*** WARNING C318 IN LINE 9 OF src\loslib.c: can't open file 'locale.h'
  10          #include <stdlib.h>
  11          #include <string.h>
  12          #include <time.h>
*** WARNING C318 IN LINE 12 OF src\loslib.c: can't open file 'time.h'
  13          
  14          #define loslib_c
  15          #define LUA_LIB
  16          
  17          #include "lua.h"
  18          
  19          #include "lauxlib.h"
*** ERROR C202 IN LINE 138 OF SRC\LAUXLIB.H: 'BUFSIZ': undefined identifier
*** ERROR C136 IN LINE 138 OF SRC\LAUXLIB.H: invalid dimension size: [0]
  20          #include "lualib.h"
  21          #include "lrotable.h"
  22          
  23          
  24          static int os_pushresult (lua_State *L, int i, const char *filename) {
  25   1        int en = errno;  /* calls to Lua API may change this value */
  26   1        if (i) {
  27   2          lua_pushboolean(L, 1);
  28   2          return 1;
  29   2        }
  30   1        else {
  31   2          lua_pushnil(L);
  32   2          lua_pushfstring(L, "%s: %s", filename, strerror(en));
  33   2          lua_pushinteger(L, en);
  34   2          return 3;
  35   2        }
  36   1      }
  37          
  38          
  39          static int os_execute (lua_State *L) {
  40   1        lua_pushinteger(L, system(luaL_optstring(L, 1, NULL)));
  41   1        return 1;
  42   1      }
  43          
  44          
  45          static int os_remove (lua_State *L) {
  46   1        const char *filename = luaL_checkstring(L, 1);
  47   1        return os_pushresult(L, remove(filename) == 0, filename);
  48   1      }
  49          
  50          
C51 COMPILER V9.00   LOSLIB                                                                11/27/2017 19:45:03 PAGE 2   

  51          static int os_rename (lua_State *L) {
  52   1        const char *fromname = luaL_checkstring(L, 1);
  53   1        const char *toname = luaL_checkstring(L, 2);
  54   1        return os_pushresult(L, rename(fromname, toname) == 0, fromname);
  55   1      }
  56          
  57          
  58          static int os_tmpname (lua_State *L) {
  59   1        char buff[LUA_TMPNAMBUFSIZE];
  60   1        int err;
  61   1        lua_tmpnam(buff, err);
  62   1        if (err)
  63   1          return luaL_error(L, "unable to generate a unique filename");
  64   1        lua_pushstring(L, buff);
  65   1        return 1;
  66   1      }
  67          
  68          
  69          static int os_getenv (lua_State *L) {
  70   1        lua_pushstring(L, getenv(luaL_checkstring(L, 1)));  /* if NULL push nil */
  71   1        return 1;
  72   1      }
  73          
  74          
  75          static int os_clock (lua_State *L) {
  76   1        lua_pushnumber(L, ((lua_Number)clock())/(lua_Number)CLOCKS_PER_SEC);
  77   1        return 1;
  78   1      }
  79          
  80          
  81          /*
  82          ** {======================================================
  83          ** Time/Date operations
  84          ** { year=%Y, month=%m, day=%d, hour=%H, min=%M, sec=%S,
  85          **   wday=%w+1, yday=%j, isdst=? }
  86          ** =======================================================
  87          */
  88          
  89          static void setfield (lua_State *L, const char *key, int value) {
  90   1        lua_pushinteger(L, value);
  91   1        lua_setfield(L, -2, key);
  92   1      }
  93          
  94          static void setboolfield (lua_State *L, const char *key, int value) {
  95   1        if (value < 0)  /* undefined? */
  96   1          return;  /* does not set field */
  97   1        lua_pushboolean(L, value);
  98   1        lua_setfield(L, -2, key);
  99   1      }
 100          
 101          static int getboolfield (lua_State *L, const char *key) {
 102   1        int res;
 103   1        lua_getfield(L, -1, key);
 104   1        res = lua_isnil(L, -1) ? -1 : lua_toboolean(L, -1);
 105   1        lua_pop(L, 1);
 106   1        return res;
 107   1      }
 108          
 109          
 110          static int getfield (lua_State *L, const char *key, int d) {
 111   1        int res;
 112   1        lua_getfield(L, -1, key);
C51 COMPILER V9.00   LOSLIB                                                                11/27/2017 19:45:03 PAGE 3   

 113   1        if (lua_isnumber(L, -1))
 114   1          res = (int)lua_tointeger(L, -1);
 115   1        else {
 116   2          if (d < 0)
 117   2            return luaL_error(L, "field " LUA_QS " missing in date table", key);
 118   2          res = d;
 119   2        }
 120   1        lua_pop(L, 1);
 121   1        return res;
 122   1      }
 123          
 124          
 125          static int os_date (lua_State *L) {
 126   1        const char *s = luaL_optstring(L, 1, "%c");
 127   1        time_t t = luaL_opt(L, (time_t)luaL_checknumber, 2, time(NULL));
 128   1        struct tm *stm;
 129   1        if (*s == '!') {  /* UTC? */
 130   2          stm = gmtime(&t);
 131   2          s++;  /* skip `!' */
 132   2        }
 133   1        else
 134   1          stm = localtime(&t);
 135   1        if (stm == NULL)  /* invalid date? */
 136   1          lua_pushnil(L);
 137   1        else if (strcmp(s, "*t") == 0) {
 138   2          lua_createtable(L, 0, 9);  /* 9 = number of fields */
 139   2          setfield(L, "sec", stm->tm_sec);
 140   2          setfield(L, "min", stm->tm_min);
 141   2          setfield(L, "hour", stm->tm_hour);
 142   2          setfield(L, "day", stm->tm_mday);
 143   2          setfield(L, "month", stm->tm_mon+1);
 144   2          setfield(L, "year", stm->tm_year+1900);
 145   2          setfield(L, "wday", stm->tm_wday+1);
 146   2          setfield(L, "yday", stm->tm_yday+1);
 147   2          setboolfield(L, "isdst", stm->tm_isdst);
 148   2        }
 149   1        else {
 150   2          char cc[3];
 151   2          luaL_Buffer b;
 152   2          cc[0] = '%'; cc[2] = '\0';
 153   2          luaL_buffinit(L, &b);
 154   2          for (; *s; s++) {
 155   3            if (*s != '%' || *(s + 1) == '\0')  /* no conversion specifier? */
 156   3              luaL_addchar(&b, *s);
 157   3            else {
 158   4              size_t reslen;
 159   4              char buff[200];  /* should be big enough for any conversion result */
 160   4              cc[1] = *(++s);
 161   4              reslen = strftime(buff, sizeof(buff), cc, stm);
 162   4              luaL_addlstring(&b, buff, reslen);
 163   4            }
 164   3          }
 165   2          luaL_pushresult(&b);
 166   2        }
 167   1        return 1;
 168   1      }
 169          
 170          
 171          static int os_time (lua_State *L) {
 172   1        time_t t;
 173   1        if (lua_isnoneornil(L, 1))  /* called without args? */
 174   1          t = time(NULL);  /* get current time */
C51 COMPILER V9.00   LOSLIB                                                                11/27/2017 19:45:03 PAGE 4   

 175   1        else {
 176   2          struct tm ts;
 177   2          luaL_checktype(L, 1, LUA_TTABLE);
 178   2          lua_settop(L, 1);  /* make sure table is at the top */
 179   2          ts.tm_sec = getfield(L, "sec", 0);
 180   2          ts.tm_min = getfield(L, "min", 0);
 181   2          ts.tm_hour = getfield(L, "hour", 12);
 182   2          ts.tm_mday = getfield(L, "day", -1);
 183   2          ts.tm_mon = getfield(L, "month", -1) - 1;
 184   2          ts.tm_year = getfield(L, "year", -1) - 1900;
 185   2          ts.tm_isdst = getboolfield(L, "isdst");
 186   2          t = mktime(&ts);
 187   2        }
 188   1        if (t == (time_t)(-1))
 189   1          lua_pushnil(L);
 190   1        else
 191   1          lua_pushnumber(L, (lua_Number)t);
 192   1        return 1;
 193   1      }
 194          
 195          #if !defined LUA_NUMBER_INTEGRAL
 196          static int os_difftime (lua_State *L) {
 197   1        lua_pushnumber(L, difftime((time_t)(luaL_checknumber(L, 1)),
 198   1                                   (time_t)(luaL_optnumber(L, 2, 0))));
 199   1        return 1;
 200   1      }
 201          #endif
 202          
 203          /* }====================================================== */
 204          
 205          
 206          static int os_setlocale (lua_State *L) {
 207   1        static const int cat[] = {LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY,
 208   1                            LC_NUMERIC, LC_TIME};
 209   1        static const char *const catnames[] = {"all", "collate", "ctype", "monetary",
 210   1           "numeric", "time", NULL};
 211   1        const char *l = luaL_optstring(L, 1, NULL);
 212   1        int op = luaL_checkoption(L, 2, "all", catnames);
 213   1        lua_pushstring(L, setlocale(cat[op], l));
 214   1        return 1;
 215   1      }
 216          
 217          
 218          static int os_exit (lua_State *L) {
 219   1        exit(luaL_optint(L, 1, EXIT_SUCCESS));
 220   1      }
 221          
 222          #define MIN_OPT_LEVEL 1
 223          #include "lrodefs.h"
 224          const LUA_REG_TYPE syslib[] = {
 225            {LSTRKEY("clock"),     LFUNCVAL(os_clock)},
 226            {LSTRKEY("date"),      LFUNCVAL(os_date)},
 227          #if !defined LUA_NUMBER_INTEGRAL
 228            {LSTRKEY("difftime"),  LFUNCVAL(os_difftime)},
 229          #endif
 230            {LSTRKEY("execute"),   LFUNCVAL(os_execute)},
 231            {LSTRKEY("exit"),      LFUNCVAL(os_exit)},
 232            {LSTRKEY("getenv"),    LFUNCVAL(os_getenv)},
 233            {LSTRKEY("remove"),    LFUNCVAL(os_remove)},
 234            {LSTRKEY("rename"),    LFUNCVAL(os_rename)},
 235            {LSTRKEY("setlocale"), LFUNCVAL(os_setlocale)},
 236            {LSTRKEY("time"),      LFUNCVAL(os_time)},
C51 COMPILER V9.00   LOSLIB                                                                11/27/2017 19:45:03 PAGE 5   

 237            {LSTRKEY("tmpname"),   LFUNCVAL(os_tmpname)},
 238            {LNILKEY, LNILVAL}
 239          };
 240          
 241          /* }====================================================== */
 242          
 243          
 244          
 245          LUALIB_API int luaopen_os (lua_State *L) {
 246   1        LREGISTER(L, LUA_OSLIBNAME, syslib);
 247   1      }

C51 COMPILATION COMPLETE.  2 WARNING(S),  2 ERROR(S)
