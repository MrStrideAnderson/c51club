C51 COMPILER V9.00   LMEM                                                                  11/27/2017 19:45:02 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LMEM
OBJECT MODULE PLACED IN .\obj\lmem.obj
COMPILER INVOKED BY: C:\my program\Keil\C51\BIN\C51.EXE src\lmem.c OMF2 BROWSE DEBUG PRINT(.\lmem.lst) OBJECT(.\obj\lmem
                    -.obj)

line level    source

   1          /*
   2          ** $Id: lmem.c,v 1.70.1.1 2007/12/27 13:02:25 roberto Exp $
   3          ** Interface to Memory Manager
   4          ** See Copyright Notice in lua.h
   5          */
   6          
   7          
   8          #include <stddef.h>
   9          
  10          #define lmem_c
  11          #define LUA_CORE
  12          
  13          #include "lua.h"
  14          
  15          #include "ldebug.h"
  16          #include "ldo.h"
  17          #include "lmem.h"
  18          #include "lobject.h"
  19          #include "lstate.h"
  20          
  21          
  22          
  23          /*
  24          ** About the realloc function:
  25          ** void * frealloc (void *ud, void *ptr, size_t osize, size_t nsize);
  26          ** (`osize' is the old size, `nsize' is the new size)
  27          **
  28          ** Lua ensures that (ptr == NULL) iff (osize == 0).
  29          **
  30          ** * frealloc(ud, NULL, 0, x) creates a new block of size `x'
  31          **
  32          ** * frealloc(ud, p, x, 0) frees the block `p'
  33          ** (in this specific case, frealloc must return NULL).
  34          ** particularly, frealloc(ud, NULL, 0, 0) does nothing
  35          ** (which is equivalent to free(NULL) in ANSI C)
  36          **
  37          ** frealloc returns NULL if it cannot create or reallocate the area
  38          ** (any reallocation to an equal or smaller size cannot fail!)
  39          */
  40          
  41          
  42          
  43          #define MINSIZEARRAY    4
  44          
  45          
  46          void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,
  47                               int limit, const char *errormsg) {
  48   1        void *newblock;
  49   1        int newsize;
  50   1        if (*size >= limit/2) {  /* cannot double it? */
  51   2          if (*size >= limit)  /* cannot grow even a little? */
  52   2            luaG_runerror(L, errormsg);
  53   2          newsize = limit;  /* still have at least one free place */
  54   2        }
C51 COMPILER V9.00   LMEM                                                                  11/27/2017 19:45:02 PAGE 2   

  55   1        else {
  56   2          newsize = (*size)*2;
  57   2          if (newsize < MINSIZEARRAY)
  58   2            newsize = MINSIZEARRAY;  /* minimum size */
  59   2        }
  60   1        newblock = luaM_reallocv(L, block, *size, newsize, size_elems);
  61   1        *size = newsize;  /* update only when everything else is OK */
  62   1        return newblock;
  63   1      }
  64          
  65          
  66          void *luaM_toobig (lua_State *L) {
  67   1        luaG_runerror(L, "memory allocation error: block too big");
  68   1        return NULL;  /* to avoid warnings */
  69   1      }
  70          
  71          
  72          
  73          /*
  74          ** generic allocation routine.
  75          */
  76          void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {
  77   1        global_State *g = G(L);
  78   1        lua_assert((osize == 0) == (block == NULL));
*** WARNING C275 IN LINE 78 OF SRC\LMEM.C: expression with possibly no effect
  79   1        block = (*g->frealloc)(g->ud, block, osize, nsize);
*** ERROR C212 IN LINE 79 OF SRC\LMEM.C: indirect call: parameters do not fit within registers
  80   1        if (block == NULL && nsize > 0)
  81   1          luaD_throw(L, LUA_ERRMEM);
  82   1        lua_assert((nsize == 0) == (block == NULL));
  83   1        g->totalbytes = (g->totalbytes - osize) + nsize;
  84   1        return block;
  85   1      }
  86          

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
