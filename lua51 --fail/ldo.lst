C51 COMPILER V9.00   LDO                                                                   11/27/2017 19:45:01 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LDO
OBJECT MODULE PLACED IN .\obj\ldo.obj
COMPILER INVOKED BY: C:\my program\Keil\C51\BIN\C51.EXE src\ldo.c OMF2 BROWSE DEBUG PRINT(.\ldo.lst) OBJECT(.\obj\ldo.ob
                    -j)

line level    source

   1          /*
   2          ** $Id: ldo.c,v 2.38.1.3 2008/01/18 22:31:22 roberto Exp $
   3          ** Stack and Call structure of Lua
   4          ** See Copyright Notice in lua.h
   5          */
   6          
   7          
   8          #include <setjmp.h>
   9          #include <stdlib.h>
  10          #include <string.h>
  11          
  12          #define ldo_c
  13          #define LUA_CORE
  14          
  15          #include "lua.h"
  16          
  17          #include "ldebug.h"
  18          #include "ldo.h"
  19          #include "lfunc.h"
  20          #include "lgc.h"
  21          #include "lmem.h"
  22          #include "lobject.h"
  23          #include "lopcodes.h"
  24          #include "lparser.h"
  25          #include "lstate.h"
  26          #include "lstring.h"
  27          #include "ltable.h"
  28          #include "ltm.h"
  29          #include "lundump.h"
  30          #include "lvm.h"
  31          #include "lzio.h"
  32          
  33          
  34          
  35          
  36          /*
  37          ** {======================================================
  38          ** Error-recovery functions
  39          ** =======================================================
  40          */
  41          
  42          
  43          /* chain list of long jump buffers */
  44          struct lua_longjmp {
  45            struct lua_longjmp *previous;
  46            luai_jmpbuf b;
  47            volatile int status;  /* error code_ */
  48          };
  49          
  50          
  51          void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {
  52   1        switch (errcode) {
  53   2          case LUA_ERRMEM: {
  54   3            ptrdiff_t oldtopr = savestack(L, oldtop);
C51 COMPILER V9.00   LDO                                                                   11/27/2017 19:45:01 PAGE 2   

  55   3            setsvalue2s(L, restorestack(L, oldtopr), luaS_newliteral(L, MEMERRMSG));
*** WARNING C275 IN LINE 55 OF SRC\LDO.C: expression with possibly no effect
  56   3            break;
  57   3          }
  58   2          case LUA_ERRERR: {
  59   3            ptrdiff_t oldtopr = savestack(L, oldtop);
  60   3            setsvalue2s(L, restorestack(L, oldtopr), luaS_newliteral(L, "error in error handling"));
*** WARNING C275 IN LINE 60 OF SRC\LDO.C: expression with possibly no effect
  61   3            break;
  62   3          }
  63   2          case LUA_ERRSYNTAX:
  64   2          case LUA_ERRRUN: {
  65   3            setobjs2s(L, oldtop, L->top - 1);  /* error message on current top */
*** WARNING C275 IN LINE 65 OF SRC\LDO.C: expression with possibly no effect
  66   3            break;
  67   3          }
  68   2        }
  69   1        L->top = oldtop + 1;
  70   1      }
  71          
  72          
  73          static void restore_stack_limit (lua_State *L) {
  74   1        lua_assert(L->stack_last - L->stack == L->stacksize - EXTRA_STACK - 1);
*** WARNING C275 IN LINE 74 OF SRC\LDO.C: expression with possibly no effect
  75   1        if (L->size_ci > LUAI_MAXCALLS) {  /* there was an overflow? */
  76   2          int inuse = cast_int(L->ci - L->base_ci);
  77   2          if (inuse + 1 < LUAI_MAXCALLS)  /* can `undo' overflow? */
  78   2            luaD_reallocCI(L, LUAI_MAXCALLS);
  79   2        }
  80   1      }
  81          
  82          
  83          static void resetstack (lua_State *L, int status) {
  84   1        L->ci = L->base_ci;
  85   1        L->base = L->ci->base;
  86   1        luaF_close(L, L->base);  /* close eventual pending closures */
  87   1        luaD_seterrorobj(L, status, L->base);
  88   1        L->nCcalls = L->baseCcalls;
  89   1        L->allowhook = 1;
  90   1        restore_stack_limit(L);
  91   1        L->errfunc = 0;
  92   1        L->errorJmp = NULL;
  93   1      }
  94          
  95          
  96          void luaD_throw (lua_State *L, int errcode) {
  97   1        unfixedstack(L); /* make sure the fixedstack & block_gc flags get reset. */
  98   1        unset_block_gc(L);
  99   1        if (L->errorJmp) {
 100   2          L->errorJmp->status = errcode;
 101   2          LUAI_THROW(L, L->errorJmp);
 102   2        }
 103   1        else {
 104   2          L->status = cast_byte(errcode);
 105   2          if (G(L)->panic) {
 106   3            resetstack(L, errcode);
 107   3            lua_unlock(L);
*** WARNING C275 IN LINE 107 OF SRC\LDO.C: expression with possibly no effect
 108   3            G(L)->panic(L);
 109   3          }
 110   2          exit(EXIT_FAILURE);
*** ERROR C202 IN LINE 110 OF SRC\LDO.C: 'EXIT_FAILURE': undefined identifier
C51 COMPILER V9.00   LDO                                                                   11/27/2017 19:45:01 PAGE 3   

 111   2        }
 112   1      }
 113          
 114          
 115          int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {
 116   1        struct lua_longjmp lj;
 117   1        lj.status = 0;
 118   1        lj.previous = L->errorJmp;  /* chain new error handler */
 119   1        L->errorJmp = &lj;
 120   1        LUAI_TRY(L, &lj,
 122   1          (*f)(L, ud);
 122   1        );
*** ERROR C212 IN LINE 122 OF SRC\LDO.C: indirect call: parameters do not fit within registers
 123   1        L->errorJmp = lj.previous;  /* restore old error handler */
 124   1        return lj.status;
 125   1      }
 126          
 127          /* }====================================================== */
 128          
 129          
 130          static void correctstack (lua_State *L, TValue *oldstack) {
 131   1        CallInfo *ci;
 132   1        GCObject *up;
 133   1        L->top = (L->top - oldstack) + L->stack;
 134   1        for (up = L->openupval; up != NULL; up = up->gch.next)
 135   1          gco2uv(up)->v = (gco2uv(up)->v - oldstack) + L->stack;
 136   1        for (ci = L->base_ci; ci <= L->ci; ci++) {
 137   2          ci->top = (ci->top - oldstack) + L->stack;
 138   2          ci->base = (ci->base - oldstack) + L->stack;
 139   2          ci->func = (ci->func - oldstack) + L->stack;
 140   2        }
 141   1        L->base = (L->base - oldstack) + L->stack;
 142   1      }
 143          
 144          
 145          void luaD_reallocstack (lua_State *L, int newsize) {
 146   1        TValue *oldstack = L->stack;
 147   1        int realsize = newsize + 1 + EXTRA_STACK;
 148   1        lua_assert(L->stack_last - L->stack == L->stacksize - EXTRA_STACK - 1);
 149   1        luaM_reallocvector(L, L->stack, L->stacksize, realsize, TValue);
 150   1        L->stacksize = realsize;
 151   1        L->stack_last = L->stack+newsize;
 152   1        correctstack(L, oldstack);
 153   1      }
 154          
 155          
 156          void luaD_reallocCI (lua_State *L, int newsize) {
 157   1        CallInfo *oldci = L->base_ci;
 158   1        luaM_reallocvector(L, L->base_ci, L->size_ci, newsize, CallInfo);
 159   1        L->size_ci = newsize;
 160   1        L->ci = (L->ci - oldci) + L->base_ci;
 161   1        L->end_ci = L->base_ci + L->size_ci - 1;
 162   1      }
 163          
 164          
 165          void luaD_growstack (lua_State *L, int n) {
 166   1        if (n <= L->stacksize)  /* double size is enough? */
 167   1          luaD_reallocstack(L, 2*L->stacksize);
 168   1        else
 169   1          luaD_reallocstack(L, L->stacksize + n);
 170   1      }
 171          
C51 COMPILER V9.00   LDO                                                                   11/27/2017 19:45:01 PAGE 4   

 172          
 173          static CallInfo *growCI (lua_State *L) {
 174   1        if (L->size_ci > LUAI_MAXCALLS)  /* overflow while handling overflow? */
 175   1          luaD_throw(L, LUA_ERRERR);
 176   1        else {
 177   2          luaD_reallocCI(L, 2*L->size_ci);
 178   2          if (L->size_ci > LUAI_MAXCALLS)
 179   2            luaG_runerror(L, "stack overflow");
 180   2        }
 181   1        return ++L->ci;
 182   1      }
 183          
 184          
 185          void luaD_callhook (lua_State *L, int event, int line) {
 186   1        lua_Hook hook = L->hook;
 187   1        if (hook && L->allowhook) {
 188   2          ptrdiff_t top = savestack(L, L->top);
 189   2          ptrdiff_t ci_top = savestack(L, L->ci->top);
 190   2          lua_Debug ar;
 191   2          ar.event = event;
 192   2          ar.currentline = line;
 193   2          if (event == LUA_HOOKTAILRET)
 194   2            ar.i_ci = 0;  /* tail call; no debug information about it */
 195   2          else
 196   2            ar.i_ci = cast_int(L->ci - L->base_ci);
 197   2          luaD_checkstack(L, LUA_MINSTACK);  /* ensure minimum stack size */
 198   2          L->ci->top = L->top + LUA_MINSTACK;
 199   2          lua_assert(L->ci->top <= L->stack_last);
 200   2          L->allowhook = 0;  /* cannot call hooks inside a hook */
 201   2          lua_unlock(L);
 202   2          (*hook)(L, &ar);
*** ERROR C212 IN LINE 202 OF SRC\LDO.C: indirect call: parameters do not fit within registers
 203   2          lua_lock(L);
 204   2          lua_assert(!L->allowhook);
 205   2          L->allowhook = 1;
 206   2          L->ci->top = restorestack(L, ci_top);
 207   2          L->top = restorestack(L, top);
 208   2        }
 209   1      }
 210          
 211          
 212          static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {
 213   1        int i;
 214   1        int nfixargs = p->numparams;
 215   1      #if defined(LUA_COMPAT_VARARG)
 216   1        Table *htab = NULL;
 217   1      #endif
 218   1        StkId base, fixed;
 219   1        for (; actual < nfixargs; ++actual)
 220   1          setnilvalue(L->top++);
 221   1      #if defined(LUA_COMPAT_VARARG)
 222   1        if (p->is_vararg & VARARG_NEEDSARG) { /* compat. with old-style vararg? */
 223   2          int nvar = actual - nfixargs;  /* number of extra arguments */
 224   2          lua_assert(p->is_vararg & VARARG_HASARG);
 225   2          luaC_checkGC(L);
 226   2          htab = luaH_new(L, nvar, 1);  /* create `arg' table */
 227   2          sethvalue2s(L, L->top, htab); /* put table on stack */
 228   2          incr_top(L);
 229   2          fixedstack(L);
 230   2          for (i=0; i<nvar; i++)  /* put extra arguments into `arg' table */
 231   2            setobj2n(L, luaH_setnum(L, htab, i+1), L->top - 1 - nvar + i);
 232   2          unfixedstack(L);
C51 COMPILER V9.00   LDO                                                                   11/27/2017 19:45:01 PAGE 5   

 233   2          /* store counter in field `n' */
 234   2          setnvalue(luaH_setstr(L, htab, luaS_newliteral(L, "n")), cast_num(nvar));
 235   2          L->top--; /* remove table from stack */
 236   2        }
 237   1      #endif
 238   1        /* move fixed parameters to final position */
 239   1        fixed = L->top - actual;  /* first fixed argument */
 240   1        base = L->top;  /* final position of first argument */
 241   1        for (i=0; i<nfixargs; i++) {
 242   2          setobjs2s(L, L->top++, fixed+i);
 243   2          setnilvalue(fixed+i);
 244   2        }
 245   1      #if defined(LUA_COMPAT_VARARG)
 246   1        /* add `arg' parameter */
 247   1        if (htab) {
 248   2          sethvalue(L, L->top++, htab);
 249   2          lua_assert(iswhite(obj2gco(htab)));
 250   2        }
 251   1      #endif
 252   1        return base;
 253   1      }
 254          
 255          
 256          static StkId tryfuncTM (lua_State *L, StkId func) {
 257   1        const TValue *tm = luaT_gettmbyobj(L, func, TM_CALL);
 258   1        StkId p;
 259   1        ptrdiff_t funcr = savestack(L, func);
 260   1        if (!ttisfunction(tm))
 261   1          luaG_typeerror(L, func, "call");
 262   1        /* Open a hole inside the stack at `func' */
 263   1        for (p = L->top; p > func; p--) setobjs2s(L, p, p-1);
 264   1        incr_top(L);
 265   1        func = restorestack(L, funcr);  /* previous call may change stack */
 266   1        setobj2s(L, func, tm);  /* tag method is the new function to be called */
 267   1        return func;
 268   1      }
 269          
 270          
 271          
 272          #define inc_ci(L) \
 273            ((L->ci == L->end_ci) ? growCI(L) : \
 274             (condhardstacktests(luaD_reallocCI(L, L->size_ci)), ++L->ci))
 275          
 276          
 277          int luaD_precall (lua_State *L, StkId func, int nresults) {
 278   1        ptrdiff_t funcr;
 279   1        LClosure *cl = NULL;
 280   1        if (!ttisfunction(func) && !ttislightfunction(func)) /* `func' is not a function? */
 281   1          func = tryfuncTM(L, func);  /* check the `function' tag method */
 282   1        funcr = savestack(L, func);
 283   1        if (ttisfunction(func))
 284   1          cl = &clvalue(func)->l;
 285   1        L->ci->savedpc = L->savedpc;
 286   1        if (cl && !cl->isC) {  /* Lua function? prepare its call */
 287   2          CallInfo *ci;
 288   2          StkId st, base;
 289   2          Proto *p = cl->p;
 290   2          luaD_checkstack(L, p->maxstacksize);
 291   2          func = restorestack(L, funcr);
 292   2          if (!p->is_vararg) {  /* no varargs? */
 293   3            base = func + 1;
 294   3            if (L->top > base + p->numparams)
C51 COMPILER V9.00   LDO                                                                   11/27/2017 19:45:01 PAGE 6   

 295   3              L->top = base + p->numparams;
 296   3          }
 297   2          else {  /* vararg function */
 298   3            int nargs = cast_int(L->top - func) - 1;
 299   3            base = adjust_varargs(L, p, nargs);
 300   3            func = restorestack(L, funcr);  /* previous call may change the stack */
 301   3          }
 302   2          ci = inc_ci(L);  /* now `enter' new function */
 303   2          ci->func = func;
 304   2          L->base = ci->base = base;
 305   2          ci->top = L->base + p->maxstacksize;
 306   2          lua_assert(ci->top <= L->stack_last);
 307   2          L->savedpc = p->code;  /* starting point */
*** ERROR C141 IN LINE 307 OF SRC\LDO.C: syntax error near 'code', expected '<id>'
 308   2          ci->tailcalls = 0;
 309   2          ci->nresults = nresults;
 310   2          for (st = L->top; st < ci->top; st++)
 311   2            setnilvalue(st);
 312   2          L->top = ci->top;
 313   2          if (L->hookmask & LUA_MASKCALL) {
 314   3            L->savedpc++;  /* hooks assume 'pc' is already incremented */
 315   3            luaD_callhook(L, LUA_HOOKCALL, -1);
 316   3            L->savedpc--;  /* correct 'pc' */
 317   3          }
 318   2          return PCRLUA;
 319   2        }
 320   1        else {  /* if is a C function, call it */
 321   2          CallInfo *ci;
 322   2          int n;
 323   2          luaD_checkstack(L, LUA_MINSTACK);  /* ensure minimum stack size */
 324   2          ci = inc_ci(L);  /* now `enter' new function */
 325   2          ci->func = restorestack(L, funcr);
 326   2          L->base = ci->base = ci->func + 1;
 327   2          ci->top = L->top + LUA_MINSTACK;
 328   2          lua_assert(ci->top <= L->stack_last);
 329   2          ci->nresults = nresults;
 330   2          if (L->hookmask & LUA_MASKCALL)
 331   2            luaD_callhook(L, LUA_HOOKCALL, -1);
 332   2          lua_unlock(L);
 333   2          if (ttisfunction(ci->func))
 334   2            n = (*curr_func(L)->c.f)(L);  /* do the actual call */
 335   2          else
 336   2            n = ((lua_CFunction)fvalue(ci->func))(L);  /* do the actual call */
 337   2          lua_lock(L);
 338   2          if (n < 0)  /* yielding? */
 339   2            return PCRYIELD;
 340   2          else {
 341   3            luaD_poscall(L, L->top - n);
 342   3            return PCRC;
 343   3          }
 344   2        }
 345   1      }
 346          
 347          
 348          static StkId callrethooks (lua_State *L, StkId firstResult) {
 349   1        ptrdiff_t fr = savestack(L, firstResult);  /* next call may change stack */
 350   1        luaD_callhook(L, LUA_HOOKRET, -1);
 351   1        if (f_isLua(L->ci)) {  /* Lua function? */
 352   2          while ((L->hookmask & LUA_MASKRET) && L->ci->tailcalls--) /* tail calls */
 353   2            luaD_callhook(L, LUA_HOOKTAILRET, -1);
 354   2        }
 355   1        return restorestack(L, fr);
C51 COMPILER V9.00   LDO                                                                   11/27/2017 19:45:01 PAGE 7   

 356   1      }
 357          
 358          
 359          int luaD_poscall (lua_State *L, StkId firstResult) {
 360   1        StkId res;
 361   1        int wanted, i;
 362   1        CallInfo *ci;
 363   1        if (L->hookmask & LUA_MASKRET)
 364   1          firstResult = callrethooks(L, firstResult);
 365   1        ci = L->ci--;
 366   1        res = ci->func;  /* res == final position of 1st result */
 367   1        wanted = ci->nresults;
 368   1        L->base = (ci - 1)->base;  /* restore base */
 369   1        L->savedpc = (ci - 1)->savedpc;  /* restore savedpc */
 370   1        /* move results to correct place */
 371   1        for (i = wanted; i != 0 && firstResult < L->top; i--)
 372   1          setobjs2s(L, res++, firstResult++);
 373   1        while (i-- > 0)
 374   1          setnilvalue(res++);
 375   1        L->top = res;
 376   1        return (wanted - LUA_MULTRET);  /* 0 iff wanted == LUA_MULTRET */
 377   1      }
 378          
 379          
 380          /*
 381          ** Call a function (C or Lua). The function to be called is at *func.
 382          ** The arguments are on the stack, right after the function.
 383          ** When returns, all the results are on the stack, starting at the original
 384          ** function position.
 385          */ 
 386          void luaD_call (lua_State *L, StkId func, int nResults) {
 387   1        if (++L->nCcalls >= LUAI_MAXCCALLS) {
 388   2          if (L->nCcalls == LUAI_MAXCCALLS)
 389   2            luaG_runerror(L, "C stack overflow");
 390   2          else if (L->nCcalls >= (LUAI_MAXCCALLS + (LUAI_MAXCCALLS>>3)))
 391   2            luaD_throw(L, LUA_ERRERR);  /* error while handing stack error */
 392   2        }
 393   1        if (luaD_precall(L, func, nResults) == PCRLUA)  /* is a Lua function? */
 394   1          luaV_execute(L, 1);  /* call it */
 395   1        L->nCcalls--;
 396   1        luaC_checkGC(L);
 397   1      }
 398          
 399          
 400          static void resume (lua_State *L, void *ud) {
 401   1        StkId firstArg = cast(StkId, ud);
 402   1        CallInfo *ci = L->ci;
 403   1        if (L->status == 0) {  /* start coroutine? */
 404   2          lua_assert(ci == L->base_ci && firstArg > L->base);
 405   2          if (luaD_precall(L, firstArg - 1, LUA_MULTRET) != PCRLUA)
 406   2            return;
 407   2        }
 408   1        else {  /* resuming from previous yield */
 409   2          lua_assert(L->status == LUA_YIELD);
 410   2          L->status = 0;
 411   2          if (!f_isLua(ci)) {  /* `common' yield? */
 412   3            /* finish interrupted execution of `OP_CALL' */
 413   3            lua_assert(GET_OPCODE(*((ci-1)->savedpc - 1)) == OP_CALL ||
 414   3                       GET_OPCODE(*((ci-1)->savedpc - 1)) == OP_TAILCALL);
 415   3            if (luaD_poscall(L, firstArg))  /* complete it... */
 416   3              L->top = L->ci->top;  /* and correct top if not multiple results */
 417   3          }
C51 COMPILER V9.00   LDO                                                                   11/27/2017 19:45:01 PAGE 8   

 418   2          else  /* yielded inside a hook: just continue its execution */
 419   2            L->base = L->ci->base;
 420   2        }
 421   1        luaV_execute(L, cast_int(L->ci - L->base_ci));
 422   1      }
 423          
 424          
 425          static int resume_error (lua_State *L, const char *msg) {
 426   1        L->top = L->ci->base;
 427   1        setsvalue2s(L, L->top, luaS_new(L, msg));
 428   1        incr_top(L);
 429   1        lua_unlock(L);
 430   1        return LUA_ERRRUN;
 431   1      }
 432          
 433          
 434          LUA_API int lua_resume (lua_State *L, int nargs) {
 435   1        int status;
 436   1        lua_lock(L);
 437   1        if (L->status != LUA_YIELD && (L->status != 0 || L->ci != L->base_ci))
 438   1            return resume_error(L, "cannot resume non-suspended coroutine");
 439   1        if (L->nCcalls >= LUAI_MAXCCALLS)
 440   1          return resume_error(L, "C stack overflow");
 441   1        luai_userstateresume(L, nargs);
 442   1        lua_assert(L->errfunc == 0);
 443   1        L->baseCcalls = ++L->nCcalls;
 444   1        status = luaD_rawrunprotected(L, resume, L->top - nargs);
 445   1        if (status != 0) {  /* error? */
 446   2          L->status = cast_byte(status);  /* mark thread as `dead' */
 447   2          luaD_seterrorobj(L, status, L->top);
 448   2          L->ci->top = L->top;
 449   2        }
 450   1        else {
 451   2          lua_assert(L->nCcalls == L->baseCcalls);
 452   2          status = L->status;
 453   2        }
 454   1        --L->nCcalls;
 455   1        lua_unlock(L);
 456   1        return status;
 457   1      }
 458          
 459          
 460          LUA_API int lua_yield (lua_State *L, int nresults) {
 461   1        luai_userstateyield(L, nresults);
 462   1        lua_lock(L);
 463   1        if (L->nCcalls > L->baseCcalls)
 464   1          luaG_runerror(L, "attempt to yield across metamethod/C-call boundary");
 465   1        L->base = L->top - nresults;  /* protect stack slots below */
 466   1        L->status = LUA_YIELD;
 467   1        lua_unlock(L);
 468   1        return -1;
 469   1      }
 470          
 471          
 472          int luaD_pcall (lua_State *L, Pfunc func, void *u,
 473                          ptrdiff_t old_top, ptrdiff_t ef) {
 474   1        int status;
 475   1        unsigned short oldnCcalls = L->nCcalls;
 476   1        ptrdiff_t old_ci = saveci(L, L->ci);
 477   1        lu_byte old_allowhooks = L->allowhook;
 478   1        ptrdiff_t old_errfunc = L->errfunc;
 479   1        L->errfunc = ef;
C51 COMPILER V9.00   LDO                                                                   11/27/2017 19:45:01 PAGE 9   

 480   1        status = luaD_rawrunprotected(L, func, u);
 481   1        if (status != 0) {  /* an error occurred? */
 482   2          StkId oldtop = restorestack(L, old_top);
 483   2          luaF_close(L, oldtop);  /* close eventual pending closures */
 484   2          luaD_seterrorobj(L, status, oldtop);
 485   2          L->nCcalls = oldnCcalls;
 486   2          L->ci = restoreci(L, old_ci);
 487   2          L->base = L->ci->base;
 488   2          L->savedpc = L->ci->savedpc;
 489   2          L->allowhook = old_allowhooks;
 490   2          restore_stack_limit(L);
 491   2        }
 492   1        L->errfunc = old_errfunc;
 493   1        return status;
 494   1      }
 495          
 496          
 497          
 498          /*
 499          ** Execute a protected parser.
 500          */
 501          struct SParser {  /* data_ to `f_parser' */
 502            ZIO *z;
 503            Mbuffer buff;  /* buffer to be used by the scanner */
 504            const char *name;
 505          };
 506          
 507          static void f_parser (lua_State *L, void *ud) {
 508   1        int i;
 509   1        Proto *tf;
 510   1        Closure *cl;
 511   1        struct SParser *p = cast(struct SParser *, ud);
 512   1        int c = luaZ_lookahead(p->z);
 513   1        luaC_checkGC(L);
 514   1        set_block_gc(L);  /* stop collector during parsing */
 515   1        tf = ((c == LUA_SIGNATURE[0]) ? luaU_undump : luaY_parser)(L, p->z,
 516   1                                                                   &p->buff, p->name);
*** ERROR C212 IN LINE 516 OF SRC\LDO.C: indirect call: parameters do not fit within registers
 517   1        cl = luaF_newLclosure(L, tf->nups, hvalue(gt(L)));
 518   1        cl->l.p = tf;
 519   1        for (i = 0; i < tf->nups; i++)  /* initialize eventual upvalues */
 520   1          cl->l.upvals[i] = luaF_newupval(L);
 521   1        setclvalue(L, L->top, cl);
 522   1        incr_top(L);
 523   1        unset_block_gc(L);
 524   1      }
 525          
 526          
 527          int luaD_protectedparser (lua_State *L, ZIO *z, const char *name) {
 528   1        struct SParser p;
 529   1        int status;
 530   1        p.z = z; p.name = name;
 531   1        luaZ_initbuffer(L, &p.buff);
 532   1        status = luaD_pcall(L, f_parser, &p, savestack(L, L->top), L->errfunc);
 533   1        luaZ_freebuffer(L, &p.buff);
 534   1        return status;
 535   1      }
 536          
 537          

C51 COMPILATION COMPLETE.  5 WARNING(S),  5 ERROR(S)
